let data = [];
let commits = [];

async function loadData() {
  // Load the CSV generated by our custom script
  data = await d3.csv('loc.csv', (row) => ({
    ...row,
    line: Number(row.line),
    depth: Number(row.depth),
    length: Number(row.length),
    date: new Date(row.date + 'T00:00' + row.timezone),
    datetime: new Date(row.datetime)
  }));
  console.log(data);
  displayStats();
  createScatterplot();
  // Initialize brush if you want to add that later:
  // brushSelector(svg, xScale, yScale, usableArea);
}

document.addEventListener('DOMContentLoaded', loadData);

function processCommits() {
    commits = d3.groups(data, d => d.commit).map(([commit, lines]) => {
      let first = lines[0];
      let { author, date, time, timezone, datetime } = first;
      return {
        id: commit,
        url: `https://github.com/ShaheerAlamKhan/portfolio/commit/${commit}`,
        author,
        date,
        time,
        timezone,
        datetime: new Date(datetime),
        hourFrac: new Date(datetime).getHours() + new Date(datetime).getMinutes() / 60,
        totalLines: lines.length,
        lines
      };
    });
  }

  function displayStats() {
    processCommits();
    const dl = d3.select('#stats').append('dl').attr('class', 'stats');
  
    dl.append('dt').html('Total <abbr title="Lines of code">LOC</abbr>');
    dl.append('dd').text(data.length);
  
    dl.append('dt').text('Total commits');
    dl.append('dd').text(commits.length);
  }
  
  function createScatterplot() {
    const width = 1000;
    const height = 600;
  
    const svg = d3.select('#chart')
      .append('svg')
      .attr('viewBox', `0 0 ${width} ${height}`)
      .style('overflow', 'visible');
  
    // Create initial scales
    let xScale = d3.scaleTime()
      .domain(d3.extent(commits, d => d.datetime))
      .range([0, width])
      .nice();
  
    let yScale = d3.scaleLinear()
      .domain([0, 24])
      .range([height, 0]);
  
    // Define margins
    const margin = { top: 10, right: 10, bottom: 30, left: 40 };
    const usableArea = {
      top: margin.top,
      right: width - margin.right,
      bottom: height - margin.bottom,
      left: margin.left,
      width: width - margin.left - margin.right,
      height: height - margin.top - margin.bottom
    };
  
    // Update scales to account for margins
    xScale.range([usableArea.left, usableArea.right]);
    yScale.range([usableArea.bottom, usableArea.top]);
  
    // Group for dots
    const dots = svg.append('g').attr('class', 'dots');
  
    // Sort commits so larger ones (by totalLines) are drawn first
    const sortedCommits = d3.sort(commits, (a, b) => b.totalLines - a.totalLines);
  
    // Create a radius scale based on totalLines (using scaleSqrt for proper area perception)
    const [minLines, maxLines] = d3.extent(commits, d => d.totalLines);
    const rScale = d3.scaleSqrt()
      .domain([minLines, maxLines])
      .range([2, 30]);
  
    // Bind data and add circles
    dots.selectAll('circle')
      .data(sortedCommits)
      .join('circle')
      .attr('cx', d => xScale(d.datetime))
      .attr('cy', d => yScale(d.hourFrac))
      .attr('r', d => rScale(d.totalLines))
      .attr('fill', 'steelblue')
      .style('fill-opacity', 0.7)
      .on('mouseenter', (event, d) => {
        updateTooltipContent(d);
        updateTooltipVisibility(true);
        updateTooltipPosition(event);
      })
      .on('mouseleave', () => {
        updateTooltipContent({});
        updateTooltipVisibility(false);
      })
      .on('mousemove', (event) => {
        updateTooltipPosition(event);
      });
  
    // Add X axis
    const xAxis = d3.axisBottom(xScale);
    svg.append('g')
      .attr('transform', `translate(0, ${usableArea.bottom})`)
      .call(xAxis);
  
    // Add Y axis with formatted ticks (00:00, 01:00, etc.)
    const yAxis = d3.axisLeft(yScale)
      .tickFormat(d => String(d % 24).padStart(2, '0') + ':00');
    svg.append('g')
      .attr('transform', `translate(${usableArea.left}, 0)`)
      .call(yAxis);
  
    // Add horizontal gridlines
    const gridlines = svg.append('g')
      .attr('class', 'gridlines')
      .attr('transform', `translate(${usableArea.left}, 0)`);
    gridlines.call(
      d3.axisLeft(yScale)
        .tickFormat('')
        .tickSize(-usableArea.width)
    );
  
    return { svg, xScale, yScale, usableArea, dots, rScale };
  }

  function updateTooltipContent(commit) {
    const link = document.getElementById('commit-link');
    const date = document.getElementById('commit-date');
    
    if (!commit || Object.keys(commit).length === 0) {
      link.href = '';
      link.textContent = '';
      date.textContent = '';
      return;
    }
    
    link.href = commit.url;
    link.textContent = commit.id;
    date.textContent = commit.datetime.toLocaleString('en', {
      dateStyle: 'full'
    });
  }
  
  function updateTooltipVisibility(isVisible) {
    const tooltip = document.getElementById('commit-tooltip');
    tooltip.hidden = !isVisible;
  }
  
  function updateTooltipPosition(event) {
    const tooltip = document.getElementById('commit-tooltip');
    tooltip.style.left = `${event.clientX + 10}px`;
    tooltip.style.top = `${event.clientY + 10}px`;
  }
  
  function brushSelector(svg, xScale, yScale, usableArea) {
    const brush = d3.brush()
      .extent([[usableArea.left, usableArea.top], [usableArea.right, usableArea.bottom]])
      .on('brush end', brushed);
  
    svg.call(brush);
    // Raise dots above the brush overlay
    svg.selectAll('.dots, .overlay ~ *').raise();
  }
  
  let brushSelection = null;
  
  function brushed(event) {
    brushSelection = event.selection;
    updateSelection();
    updateSelectionCount();
    updateLanguageBreakdown();
  }
  
  function isCommitSelected(commit, xScale, yScale) {
    if (!brushSelection) return false;
  
    const [[x0, y0], [x1, y1]] = brushSelection;
    const x = xScale(commit.datetime);
    const y = yScale(commit.hourFrac);
  
    return x >= x0 && x <= x1 && y >= y0 && y <= y1;
  }
  
  function updateSelection() {
    d3.selectAll('circle').classed('selected', d => isCommitSelected(d, xScale, yScale));
  }
  
  function updateSelectionCount() {
    const selectedCommits = brushSelection ? commits.filter(d => isCommitSelected(d, xScale, yScale)) : [];
    const countElement = document.getElementById('selection-count');
    countElement.textContent = `${selectedCommits.length || 'No'} commits selected`;
  }
  
  function updateLanguageBreakdown() {
    const selectedCommits = brushSelection ? commits.filter(d => isCommitSelected(d, xScale, yScale)) : [];
    const container = document.getElementById('language-breakdown');
  
    if (selectedCommits.length === 0) {
      container.innerHTML = '';
      return;
    }
  
    // Example: Assuming each commitâ€™s "lines" array has a 'type' property.
    const lines = selectedCommits.flatMap(commit => commit.lines);
    const breakdown = d3.rollup(
      lines,
      v => v.length,
      d => d.type
    );
  
    container.innerHTML = '';
    breakdown.forEach((count, language) => {
      const dt = document.createElement('dt');
      dt.textContent = language;
      const dd = document.createElement('dd');
      dd.textContent = count;
      container.appendChild(dt);
      container.appendChild(dd);
    });
  }
  