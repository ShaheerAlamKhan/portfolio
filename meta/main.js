let data = [];
let commits = [];
let selectedCommits = [];
let xScale, yScale, rScale;
let fileTypeColors;

// Variables for time slider
let commitProgress = 100;
let timeScale;
let commitMaxTime;
let filteredCommits = [];

async function loadData() {
  // Load the CSV generated by our custom script
  data = await d3.csv('loc.csv', (row) => ({
    ...row,
    line: Number(row.line),
    depth: Number(row.depth),
    length: Number(row.length),
    date: new Date(row.date + 'T00:00' + row.timezone),
    datetime: new Date(row.datetime)
  }));
  console.log(data);
  processCommits();
  displayStats();
  
  // Initialize time slider
  initializeTimeSlider();
  
  // Initial filter and render of visualizations
  filterCommitsByTime();
  updateScatterplot(filteredCommits);
  displayCommitFiles(filteredCommits);
  
  // Initialize scrollytelling (commented out until slider is working properly)
  // setupScrollytelling();
  // setupFilesScrollytelling();
}

document.addEventListener('DOMContentLoaded', loadData);

function processCommits() {
  commits = d3.groups(data, d => d.commit).map(([commit, lines]) => {
    let first = lines[0];
    let { author, date, time, timezone, datetime } = first;
    return {
      id: commit,
      url: `https://github.com/ShaheerAlamKhan/portfolio/commit/${commit}`,
      author,
      date,
      time,
      timezone,
      datetime: new Date(datetime),
      hourFrac: new Date(datetime).getHours() + new Date(datetime).getMinutes() / 60,
      totalLines: lines.length,
      lines
    };
  });
  
  // Sort commits by date
  commits.sort((a, b) => a.datetime - b.datetime);
}

function initializeTimeSlider() {
  // Create a time scale to map percentage to dates
  timeScale = d3.scaleTime()
    .domain([
      d3.min(commits, d => d.datetime),
      d3.max(commits, d => d.datetime)
    ])
    .range([0, 100]);
  
  // Initialize commitMaxTime based on slider value
  updateTimeDisplay();
  
  // Add event listener for slider changes
  const timeSlider = document.getElementById('time-slider');
  timeSlider.addEventListener('input', updateTimeDisplay);
}

function updateTimeDisplay() {
  const timeSlider = document.getElementById('time-slider');
  commitProgress = Number(timeSlider.value);
  commitMaxTime = timeScale.invert(commitProgress);
  
  // Update displayed time
  const selectedTime = document.getElementById('selectedTime');
  selectedTime.textContent = commitMaxTime.toLocaleString('en', {
    dateStyle: 'full',
    timeStyle: 'short'
  });
  
  // Filter commits and update visualizations
  filterCommitsByTime();
  updateScatterplot(filteredCommits);
  displayCommitFiles(filteredCommits);
}

function filterCommitsByTime() {
  filteredCommits = commits.filter(commit => commit.datetime <= commitMaxTime);
}

function displayStats() {
  const dl = d3.select('#stats').append('dl').attr('class', 'stats');

  dl.append('dt').html('Total <abbr title="Lines of code">LOC</abbr>');
  dl.append('dd').text(data.length);

  dl.append('dt').text('Total commits');
  dl.append('dd').text(commits.length);
  
  dl.append('dt').text('Files');
  dl.append('dd').text(d3.rollup(data, v => d3.count(v, d => d.file), d => d.file).size);
  
  // Additional stats
  const longestLine = d3.max(data, d => d.length);
  dl.append('dt').text('Longest line');
  dl.append('dd').text(longestLine);
  
  const maxDepth = d3.max(data, d => d.depth);
  dl.append('dt').text('Max depth');
  dl.append('dd').text(maxDepth);
  
  const maxLines = d3.max(commits, d => d.totalLines);
  dl.append('dt').text('Max lines');
  dl.append('dd').text(maxLines);
}

function isCommitSelected(commit) {
  return selectedCommits.includes(commit);
}

function updateScatterplot(filteredCommits) {
  // Clear existing SVG
  d3.select('svg').remove();
  
  const width = 1000;
  const height = 600;

  const svg = d3.select('#chart')
    .append('svg')
    .attr('viewBox', `0 0 ${width} ${height}`)
    .style('overflow', 'visible');

  // Create scales
  xScale = d3.scaleTime()
    .domain(d3.extent(filteredCommits, d => d.datetime))
    .range([0, width])
    .nice();

  yScale = d3.scaleLinear()
    .domain([0, 24])
    .range([height, 0]);

  // Define margins
  const margin = { top: 10, right: 10, bottom: 30, left: 40 };
  const usableArea = {
    top: margin.top,
    right: width - margin.right,
    bottom: height - margin.bottom,
    left: margin.left,
    width: width - margin.left - margin.right,
    height: height - margin.top - margin.bottom
  };

  // Update scales to account for margins
  xScale.range([usableArea.left, usableArea.right]);
  yScale.range([usableArea.bottom, usableArea.top]);

  // Group for dots
  const dots = svg.append('g').attr('class', 'dots');

  // Sort commits so larger ones (by totalLines) are drawn first
  const sortedCommits = d3.sort(filteredCommits, (a, b) => b.totalLines - a.totalLines);

  // Create a radius scale based on totalLines
  const [minLines, maxLines] = d3.extent(filteredCommits, d => d.totalLines);
  rScale = d3.scaleSqrt()
    .domain([minLines, maxLines])
    .range([2, 30]);

  // Bind data and add circles
  dots.selectAll('circle')
    .data(sortedCommits)
    .join('circle')
    .attr('cx', d => xScale(d.datetime))
    .attr('cy', d => yScale(d.hourFrac))
    .attr('r', d => rScale(d.totalLines))
    .attr('fill', 'steelblue')
    .style('fill-opacity', 0.7)
    .style('--r', d => rScale(d.totalLines)) // For CSS transition
    .on('mouseenter', (event, d) => {
      d3.select(event.currentTarget).classed('selected', true);
      updateTooltipContent(d);
      updateTooltipVisibility(true);
      updateTooltipPosition(event);
    })
    .on('mouseleave', (event) => {
      d3.select(event.currentTarget).classed('selected', false);
      updateTooltipContent({});
      updateTooltipVisibility(false);
    })
    .on('mousemove', (event) => {
      updateTooltipPosition(event);
    });

  // Add X axis
  const xAxis = d3.axisBottom(xScale);
  svg.append('g')
    .attr('transform', `translate(0, ${usableArea.bottom})`)
    .call(xAxis);

  // Add Y axis with formatted ticks (00:00, 01:00, etc.)
  const yAxis = d3.axisLeft(yScale)
    .tickFormat(d => String(d % 24).padStart(2, '0') + ':00');
  svg.append('g')
    .attr('transform', `translate(${usableArea.left}, 0)`)
    .call(yAxis);

  // Add horizontal gridlines
  const gridlines = svg.append('g')
    .attr('class', 'gridlines')
    .attr('transform', `translate(${usableArea.left}, 0)`);
  gridlines.call(
    d3.axisLeft(yScale)
      .tickFormat('')
      .tickSize(-usableArea.width)
  );
}

function updateTooltipContent(commit) {
  const link = document.getElementById('commit-link');
  const date = document.getElementById('commit-date');
  
  if (!commit || Object.keys(commit).length === 0) {
    link.href = '';
    link.textContent = '';
    date.textContent = '';
    return;
  }
  
  link.href = commit.url;
  link.textContent = commit.id;
  date.textContent = commit.datetime.toLocaleString('en', {
    dateStyle: 'full'
  });
}

function updateTooltipVisibility(isVisible) {
  const tooltip = document.getElementById('commit-tooltip');
  tooltip.hidden = !isVisible;
}

function updateTooltipPosition(event) {
  const tooltip = document.getElementById('commit-tooltip');
  tooltip.style.left = `${event.clientX + 10}px`;
  tooltip.style.top = `${event.clientY + 10}px`;
}

function brushed(evt) {
  let brushSelection = evt.selection;
  selectedCommits = !brushSelection
    ? []
    : commits.filter((commit) => {
      let min = { x: brushSelection[0][0], y: brushSelection[0][1] };
      let max = { x: brushSelection[1][0], y: brushSelection[1][1] };
      let x = xScale(commit.datetime);
      let y = yScale(commit.hourFrac);
      return x >= min.x && x <= max.x && y >= min.y && y <= max.y;
    });
    
  updateSelectionCount();
  updateLanguageBreakdown();
}

function updateSelectionCount() {
  const countElement = document.getElementById('selection-count');
  countElement.textContent = `${selectedCommits.length || 'No'} commits selected`;
}

function updateLanguageBreakdown() {
  const container = document.getElementById('language-breakdown');

  if (selectedCommits.length === 0) {
    container.innerHTML = '';
    return;
  }

  const lines = selectedCommits.flatMap(commit => commit.lines);
  // Assuming each line has a 'type' property based on file extension
  const fileExtensions = d3.rollup(
    lines,
    v => v.length,
    d => d.file.split('.').pop()
  );

  container.innerHTML = '';
  fileExtensions.forEach((count, extension) => {
    const dt = document.createElement('dt');
    dt.textContent = extension;
    const dd = document.createElement('dd');
    dd.textContent = count;
    container.appendChild(dt);
    container.appendChild(dd);
  });
}

// Scrollytelling implementation
function setupScrollytelling() {
  const NUM_ITEMS = commits.length;
  const ITEM_HEIGHT = 80; // Increased height for content
  const VISIBLE_COUNT = 5;
  const totalHeight = (NUM_ITEMS - 1) * ITEM_HEIGHT;
  
  const scrollContainer = d3.select('#scroll-container');
  const spacer = d3.select('#spacer');
  spacer.style('height', `${totalHeight}px`);
  const itemsContainer = d3.select('#items-container');
  
  scrollContainer.on('scroll', () => {
    const scrollTop = scrollContainer.property('scrollTop');
    let startIndex = Math.floor(scrollTop / ITEM_HEIGHT);
    startIndex = Math.max(0, Math.min(startIndex, commits.length - VISIBLE_COUNT));
    renderCommitItems(startIndex);
  });
  
  // Initial render
  renderCommitItems(0);
}

function renderCommitItems(startIndex) {
  // Clear items container
  d3.select('#items-container').selectAll('div').remove();
  
  const ITEM_HEIGHT = 80;
  const VISIBLE_COUNT = 5;
  const endIndex = Math.min(startIndex + VISIBLE_COUNT, commits.length);
  const visibleCommits = commits.slice(startIndex, endIndex);
  
  // Update visualization
  updateScatterplot(visibleCommits);
  
  // Create items for visible commits
  const items = d3.select('#items-container')
    .selectAll('div')
    .data(visibleCommits)
    .enter()
    .append('div')
    .attr('class', 'item')
    .style('position', 'absolute')
    .style('top', (_, i) => `${i * ITEM_HEIGHT}px`)
    .style('height', `${ITEM_HEIGHT}px`)
    .style('width', '100%')
    .style('overflow', 'auto');
  
  // Add narrative content
  items.html((d, i) => `
    <p>
      On ${d.datetime.toLocaleString("en", {dateStyle: "full", timeStyle: "short"})}, I made
      <a href="${d.url}" target="_blank">
        ${startIndex + i > 0 ? 'another glorious commit' : 'my first commit, and it was glorious'}
      </a>. I edited ${d.totalLines} lines across ${d3.rollups(d.lines, D => D.length, d => d.file).length} files. Then I looked over all I had made, and
      I saw that it was very good.
    </p>
  `);
}

// Files visualization implementation
function displayCommitFiles(filteredCommits) {
  const lines = filteredCommits.flatMap((d) => d.lines);
  fileTypeColors = d3.scaleOrdinal(d3.schemeTableau10);
  
  // Group lines by file
  let files = d3.groups(lines, (d) => d.file).map(([name, lines]) => {
    return { name, lines };
  });
  
  // Sort files by number of lines in descending order
  files = d3.sort(files, (d) => -d.lines.length);
  
  // Clear and update the file display
  d3.select('.files').selectAll('div').remove();
  
  // Create file visualization
  let filesContainer = d3.select('.files')
    .selectAll('div')
    .data(files)
    .enter()
    .append('div');
  
  // Add file names and line counts
  filesContainer.append('dt')
    .html(d => `<code>${d.name}</code><small>${d.lines.length} lines</small>`);
  
  // Add unit visualization (dots) for lines
  filesContainer.append('dd')
    .selectAll('div')
    .data(d => d.lines)
    .enter()
    .append('div')
    .attr('class', 'line')
    .style('background', d => {
      // Determine type by file extension - Fix for the undefined error
      const ext = d.file && typeof d.file === 'string' ? d.file.split('.').pop() : 'unknown';
      return fileTypeColors(ext);
    });
}

function setupFilesScrollytelling() {
  const NUM_ITEMS = commits.length;
  const ITEM_HEIGHT = 80;
  const VISIBLE_COUNT = 5;
  const totalHeight = (NUM_ITEMS - 1) * ITEM_HEIGHT;
  
  const scrollContainer = d3.select('#files-scroll-container');
  const spacer = d3.select('#files-spacer');
  spacer.style('height', `${totalHeight}px`);
  const itemsContainer = d3.select('#files-items-container');
  
  scrollContainer.on('scroll', () => {
    const scrollTop = scrollContainer.property('scrollTop');
    let startIndex = Math.floor(scrollTop / ITEM_HEIGHT);
    startIndex = Math.max(0, Math.min(startIndex, commits.length - VISIBLE_COUNT));
    renderFileItems(startIndex);
  });
  
  // Initial render
  renderFileItems(0);
}

function renderFileItems(startIndex) {
  // Clear items container
  d3.select('#files-items-container').selectAll('div').remove();
  
  const ITEM_HEIGHT = 80;
  const VISIBLE_COUNT = 5;
  const endIndex = Math.min(startIndex + VISIBLE_COUNT, commits.length);
  const visibleCommits = commits.slice(startIndex, endIndex);
  
  // Update files visualization
  displayCommitFiles(visibleCommits);
  
  // Create items for visible commits focused on files
  const items = d3.select('#files-items-container')
    .selectAll('div')
    .data(visibleCommits)
    .enter()
    .append('div')
    .attr('class', 'item')
    .style('position', 'absolute')
    .style('top', (_, i) => `${i * ITEM_HEIGHT}px`)
    .style('height', `${ITEM_HEIGHT}px`)
    .style('width', '100%')
    .style('overflow', 'auto');
  
  // Add narrative content focusing on files
  items.html((d, i) => {
    // Safely get file types - Fix for undefined error
    const fileTypes = Array.from(new Set(d.lines
      .filter(line => line.file && typeof line.file === 'string')
      .map(line => line.file.split('.').pop())
    ));
    return `
      <p>
        In this commit on ${d.datetime.toLocaleString("en", {dateStyle: "medium"})}, I worked with 
        ${fileTypes.join(', ')} files. The largest changes were made to 
        ${d3.rollups(d.lines, v => v.length, line => line.file)
          .sort((a, b) => b[1] - a[1])
          .slice(0, 2)
          .map(([file]) => file)
          .join(' and ')}.
      </p>
    `;
  });
}